.program keeloq_rx
.define FRAME_SIZE 2
.define FIFO_BASIC_UNIT_SIZE 32
.define BIT_COUNT FRAME_SIZE*FIFO_BASIC_UNIT_SIZE
.side_set 1 opt
    wait 1 pin 0
    set x, 10
header_bitloop:
    in pins, 1
    jmp x--, header_bitloop [5]
    push                            ;push it to fifo for later evaluation
    set x, 10
data_bitloop:
    wait 1 pin 0
    nop [7]                         ;wait for middle of bit
    in pins, 1
    push iffull noblock
    ;delay may be necessary here
    jmp x-- data_bitloop

% c-sdk {
#include "hardware/clocks.h"

static inline void manchester_tx_program_init(PIO pio, uint sm, uint offset, uint pin_rx, uint bitrate, uint side_set_pin){ //-DEBUG-

    // pio_sm_set_pins_with_mask(pio, sm, 1u << pin_rx, 1u << pin_rx);
    // pio_sm_set_pindirs_with_mask(pio, sm, 1u << pin_rx, 1u << pin_rx);
    
    pio_set_consecutive_pindirs(pio, sm, pin_rx, 1, false);
    pio_gpio_init(pio, pin_rx);
    gpio_pull_down(pin_rx);

    pio_sm_config c = manchester_tx_program_get_default_config(offset);

    sm_config_set_in_pins(&c, pin_rx);                                  // for WAIT, IN
    //sm_config_set_jmp_pin(&c, pin);                                   // for JMP, may be useful for finding framing errors
    sm_config_set_in_shift(&c, true, false, 32);

    sm_config_set_sideset_pins(&c, side_set_pin);                       //-DEBUG-
    gpio_set_dir(side_set_pin, true);                                   //-DEBUG-
    pio_gpio_init(pio, pin_rx);                                         //-DEBUG-

    // Shift to right, autopush disabled
    sm_config_set_in_shift(&c, true, false, 32);

    // SM transmits 1 bit per 8 execution cycles.
    float div = (float)clock_get_hz(clk_sys) / (8 * bitrate);
    sm_config_set_clkdiv(&c, div);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

%}